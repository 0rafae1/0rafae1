name: Generate GitHub Stats

on:
  push:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  generate-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_1 }}

      - name: Create assets directory
        run: mkdir -p assets

      - name: Install dependencies with error handling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc curl
          echo "Dependencies installed successfully"

      - name: Fetch GitHub Data with PAT authentication
        run: |
          PAT="${{ secrets.PAT_1 }}"
          USERNAME="0rafae1"
          
          echo "Fetching user data..."
          USER_DATA=$(curl -s -H "Authorization: token $PAT" \
            "https://api.github.com/users/$USERNAME" || echo '{}')
          
          echo "Fetching repositories..."
          REPOS_DATA=$(curl -s -H "Authorization: token $PAT" \
            "https://api.github.com/users/$USERNAME/repos?per_page=100&sort=updated" || echo '[]')
          
          echo "Fetching events..."
          EVENTS_DATA=$(curl -s -H "Authorization: token $PAT" \
            "https://api.github.com/users/$USERNAME/events?per_page=300" || echo '[]')
          
          # Processar dados b√°sicos
          TOTAL_STARS=$(echo "$REPOS_DATA" | jq '[.[].stargazers_count] | add // 0')
          TOTAL_FORKS=$(echo "$REPOS_DATA" | jq '[.[].forks_count] | add // 0')
          
          # Calcular commits dos √∫ltimos 12 meses
          CURRENT_DATE=$(date -u +"%Y-%m-%d")
          YEAR_AGO=$(date -u -d "1 year ago" +"%Y-%m-%d")
          TOTAL_COMMITS=$(echo "$EVENTS_DATA" | jq --arg year_ago "$YEAR_AGO" \
            '[.[] | select(.type == "PushEvent") | select(.created_at >= $year_ago) | .payload.commits[]] | length // 0')
          
          TOTAL_PRS=$(echo "$EVENTS_DATA" | jq --arg year_ago "$YEAR_AGO" \
            '[.[] | select(.type == "PullRequestEvent") | select(.created_at >= $year_ago)] | length // 0')
          
          TOTAL_ISSUES=$(echo "$EVENTS_DATA" | jq --arg year_ago "$YEAR_AGO" \
            '[.[] | select(.type == "IssuesEvent") | select(.created_at >= $year_ago)] | length // 0')
          
          # Contar reposit√≥rios onde contribuiu (n√£o pr√≥prios)
          CONTRIBUTED_TO=$(echo "$EVENTS_DATA" | jq --arg username "$USERNAME" --arg year_ago "$YEAR_AGO" \
            '[.[] | select(.created_at >= $year_ago) | select(.repo.name | contains($username + "/") | not)] | 
            unique_by(.repo.name) | length // 0')
          
          # Salvar dados b√°sicos
          echo "$TOTAL_STARS" > total_stars.txt
          echo "$TOTAL_COMMITS" > total_commits.txt
          echo "$TOTAL_PRS" > total_prs.txt
          echo "$TOTAL_ISSUES" > total_issues.txt
          echo "$CONTRIBUTED_TO" > contributed_to.txt
          echo "$TOTAL_FORKS" > total_forks.txt
          
          echo "Fetching detailed language data..."
          # Buscar linguagens detalhadas de cada reposit√≥rio
          echo '{}' > all_languages.json
          
          echo "$REPOS_DATA" | jq -r '.[].name' | head -20 | while read -r repo_name; do
            if [ ! -z "$repo_name" ]; then
              echo "Processing repository: $repo_name"
              LANG_DATA=$(curl -s -H "Authorization: token $PAT" \
                "https://api.github.com/repos/$USERNAME/$repo_name/languages" || echo '{}')
              
              # Combinar com dados existentes
              jq -s '.[0] * .[1]' all_languages.json <(echo "$LANG_DATA") > temp_langs.json
              mv temp_langs.json all_languages.json
              
              # Pequena pausa para evitar rate limiting
              sleep 0.5
            fi
          done
          
          echo "Language data collection complete"

      - name: Generate Modern Stats SVG
        run: |
          # Ler dados
          TOTAL_STARS=$(cat total_stars.txt || echo "0")
          TOTAL_COMMITS=$(cat total_commits.txt || echo "0")
          TOTAL_PRS=$(cat total_prs.txt || echo "0")
          TOTAL_ISSUES=$(cat total_issues.txt || echo "0")
          CONTRIBUTED_TO=$(cat contributed_to.txt || echo "0")
          TOTAL_FORKS=$(cat total_forks.txt || echo "0")
          
          # Criar SVG moderno com design semelhante ao exemplo
          cat > assets/github-stats.svg << EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="500" height="200" viewBox="0 0 500 200">
            <defs>
              <linearGradient id="gradient1" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#58a6ff;stop-opacity:0.8" />
                <stop offset="100%" style="stop-color:#1f6feb;stop-opacity:0.6" />
              </linearGradient>
              <linearGradient id="cardGrad" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#21262d;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#0d1117;stop-opacity:1" />
              </linearGradient>
            </defs>
            
            <!-- Background com gradiente -->
            <rect width="500" height="200" rx="10" fill="url(#cardGrad)" stroke="#30363d" stroke-width="1"/>
            
            <!-- T√≠tulo -->
            <text x="25" y="40" style="fill:#58a6ff; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:26px; font-weight:700;">
              0rafae1's GitHub Stats
            </text>
            
            <!-- Estat√≠sticas em grid -->
            <g transform="translate(25, 65)">
              <!-- Primeira linha -->
              <g>
                <text y="0" style="fill:#38BDAE; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:16px; font-weight:bold;">
                  ‚≠ê Total Stars Earned:
                </text>
                <text x="180" y="0" style="fill:#f0f6fc; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px; font-weight:600;">
                  $TOTAL_STARS
                </text>
                
                <text x="250" y="0" style="fill:#38BDAE; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:16px; font-weight:bold;">
                  üîó Total Forks:
                </text>
                <text x="380" y="0" style="fill:#f0f6fc; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px; font-weight:600;">
                  $TOTAL_FORKS
                </text>
              </g>
              
              <!-- Segunda linha -->
              <g transform="translate(0, 25)">
                <text y="0" style="fill:#38BDAE; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:16px; font-weight:bold;">
                  üìù Total Commits:
                </text>
                <text x="180" y="0" style="fill:#f0f6fc; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px; font-weight:600;">
                  $TOTAL_COMMITS
                </text>
                
                <text x="250" y="0" style="fill:#38BDAE; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:16px; font-weight:bold;">
                  üîÄ Total PRs:
                </text>
                <text x="380" y="0" style="fill:#f0f6fc; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px; font-weight:600;">
                  $TOTAL_PRS
                </text>
              </g>
              
              <!-- Terceira linha -->
              <g transform="translate(0, 50)">
                <text y="0" style="fill:#7d8590; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px;">
                  üêõ Total Issues:
                </text>
                <text x="180" y="0" style="fill:#f0f6fc; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px; font-weight:600;">
                  $TOTAL_ISSUES
                </text>
                
                <text x="250" y="0" style="fill:#7d8590; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px;">
                  üöÄ Contributed to (last year):
                </text>
                <text x="450" y="0" style="fill:#f0f6fc; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:14px; font-weight:600;">
                  $CONTRIBUTED_TO
                </text>
              </g>
            </g>
            
            <!-- Footer com data -->
            <text x="25" y="185" style="fill:#484f58; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:10px;">
              Last updated: $(date +'%d/%m/%Y %H:%M UTC')
            </text>
          </svg>
          EOF

      - name: Generate Modern Languages SVG
        run: |
          # Processar dados de linguagens
          LANG_DATA=$(cat all_languages.json || echo '{}')
          
          # Calcular total de bytes
          TOTAL_BYTES=$(echo "$LANG_DATA" | jq '[.[]] | add // 1')
          
          # Criar array de linguagens ordenado
          LANGS_ARRAY=$(echo "$LANG_DATA" | jq -r 'to_entries | sort_by(.value) | reverse | .[0:5] | .[] | "\(.key) \(.value)"')
          
          # Criar SVG de linguagens moderno
          cat > assets/github-langs.svg << 'EOF'
          <svg xmlns="http://www.w3.org/2000/svg" width="500" height="320" viewBox="0 0 500 320">
            <defs>
              <linearGradient id="cardGrad" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#21262d;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#0d1117;stop-opacity:1" />
              </linearGradient>
            </defs>
            
            <!-- Background -->
            <rect width="500" height="320" rx="10" fill="url(#cardGrad)" stroke="#30363d" stroke-width="1"/>
            
            <!-- T√≠tulo -->
            <text x="25" y="45" style="fill:#58a6ff; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:36px; font-weight:600;">
              Most Used Languages
            </text>
          EOF
          
          # Definir cores das linguagens
          declare -A colors=(
            ["JavaScript"]="#f1e05a"
            ["TypeScript"]="#3178c6"
            ["HTML"]="#e34c26"
            ["CSS"]="#563d7c"
            ["Python"]="#3572A5"
            ["Java"]="#b07219"
            ["PHP"]="#4F5D95"
            ["Ruby"]="#701516"
            ["C++"]="#f34b7d"
            ["C"]="#555555"
            ["Shell"]="#89e051"
            ["Dockerfile"]="#384d54"
            ["Vue"]="#4fc08d"
            ["React"]="#61dafb"
          )
          
          # Criar barra de progresso das linguagens
          if [ ! -z "$LANGS_ARRAY" ]; then
            # Calcular posi√ß√µes para a barra
            echo "            <!-- Barra de linguagens -->" >> assets/github-langs.svg
            echo "            <g transform=\"translate(25, 110)\">" >> assets/github-langs.svg
            
            current_x=0
            total_width=450
            
            echo "$LANGS_ARRAY" | while IFS=' ' read -r language bytes; do
              if [ ! -z "$language" ] && [ ! -z "$bytes" ]; then
                percent=$(echo "scale=4; ($bytes / $TOTAL_BYTES) * 100" | bc 2>/dev/null || echo "0")
                width=$(echo "scale=2; ($percent / 100) * $total_width" | bc 2>/dev/null || echo "0")
                color=${colors[$language]:-"#58a6ff"}
                
                if (( $(echo "$width > 5" | bc -l) )); then
                  echo "              <rect x=\"$current_x\" y=\"0\" width=\"$width\" height=\"12\" fill=\"$color\" rx=\"6\"/>" >> assets/github-langs.svg
                fi
                
                current_x=$(echo "$current_x + $width" | bc)
              fi
            done
            
            echo "            </g>" >> assets/github-langs.svg
          fi
          
          # Adicionar linguagens ao SVG
          y_pos=150
          if [ ! -z "$LANGS_ARRAY" ]; then
            echo "$LANGS_ARRAY" | while IFS=' ' read -r language bytes; do
              if [ ! -z "$language" ] && [ ! -z "$bytes" ]; then
                percent=$(echo "scale=2; ($bytes / $TOTAL_BYTES) * 100" | bc 2>/dev/null || echo "0")
                color=${colors[$language]:-"#58a6ff"}
                
                cat >> assets/github-langs.svg << EOF
            
            <!-- $language -->
            <g transform="translate(25, $y_pos)">
              <circle cx="8" cy="0" r="6" fill="$color"/>
              <text x="25" y="5" style="fill:#38bdae; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:24px; font-weight:500;">
                $language
              </text>
              <text x="400" y="5" style="fill:#7d8590; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:20px;">
                ${percent}%
              </text>
            </g>
          EOF
                y_pos=$((y_pos + 35))
              fi
            done
          fi
          
          # Fechar SVG
          cat >> assets/github-langs.svg << 'EOF'
            
            <!-- Footer -->
            <text x="25" y="305" style="fill:#484f58; font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Helvetica,Arial,sans-serif; font-size:10px;">
              Last updated: $(date +'%d/%m/%Y %H:%M UTC')
            </text>
          </svg>
          EOF

      - name: Clean up temporary files
        run: |
          rm -f total_*.txt contributed_to.txt all_languages.json temp_langs.json
          echo "Temporary files cleaned up successfully"

      - name: Commit and Push results
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add assets/
          if ! git diff --staged --quiet; then
            git commit -m "fix: improve readability with larger fonts and compact language card layout"
            git push
          else
            echo "No changes to commit"
          fi